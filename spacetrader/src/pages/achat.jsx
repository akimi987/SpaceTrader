import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";

export default function AddContactForm() {
  const storedId = localStorage.getItem("userId");
  if (!storedId) {
    window.location.href = "/";
  }
  const token = localStorage.getItem("token");
  const [agentData, setAgentData] = useState(null);
  const [shipsData, setShipsData] = useState([]);
  const [selectedShipyardSymbol, setSelectedShipyardSymbol] = useState(null);

  useEffect(() => {
    const fetchAgentData = async () => {
      try {
        const response = await axios.get(
          `https://api.spacetraders.io/v2/my/agent`,
          {
            headers: {
              Accept: "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (response.status === 200) {
          const data = response.data.data;
          setAgentData(data);
        }
      } catch (error) {
        console.error(
          "Erreur lors de la récupération des données de l'agent :",
          error
        );
      }
    };

    const fetchShipsData = async () => {
      try {
        const response = await axios.get(
          `https://api.spacetraders.io/v2/my/ships`,
          {
            headers: {
              Accept: "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (response.status === 200) {
          const ships = response.data.data;
          const systemSymbolsSet = new Set(
            ships.map((ship) => ship.nav.systemSymbol)
          );
          const uniqueSystemSymbols = Array.from(systemSymbolsSet);

          // Obtenir les shipyards pour chaque systemSymbol
          for (let symbol of uniqueSystemSymbols) {
            const shipyardResponse = await axios.get(
              `https://api.spacetraders.io/v2/systems/${symbol}/waypoints?traits=SHIPYARD`,
              {
                headers: {
                  Accept: "application/json",
                  Authorization: `Bearer ${token}`,
                },
              }
            );

            if (shipyardResponse.status === 200) {
              const shipyards = shipyardResponse.data.data;

              // Pour chaque shipyard, obtenir les vaisseaux disponibles
              for (let shipyard of shipyards) {
                const shipyardDataResponse = await axios.get(
                  `https://api.spacetraders.io/v2/systems/${symbol}/waypoints/${shipyard.symbol}/shipyard`,
                  {
                    headers: {
                      Accept: "application/json",
                      Authorization: `Bearer ${token}`,
                    },
                  }
                );
                if (shipyardDataResponse.status === 200) {
                  const shipyardData = shipyardDataResponse.data.data;
                  setSelectedShipyardSymbol(shipyardData.symbol);

                  let transactionData = [];

                  if (Array.isArray(shipyardData)) {
                    transactionData = shipyardData.filter(
                      (ship) => ship.transactions
                    );
                  } else if (
                    typeof shipyardData === "object" &&
                    shipyardData !== null &&
                    shipyardData.transactions
                  ) {
                    transactionData = [shipyardData];
                  }

                  // Vérifier si chaque vaisseau dans transactionData existe déjà dans shipsData
                  for (let transactionShip of transactionData) {
                    // Vérifier si le vaisseau existe déjà dans shipsData
                    const exists = shipsData.some(
                      (existingShip) => existingShip.id === transactionShip.id
                    );

                    if (!exists) {
                      setShipsData((prevData) => [transactionShip]);
                    }
                  }
                }
              }
            }
          }
        }
      } catch (error) {
        console.error(
          "Erreur lors de la récupération des données des vaisseaux :",
          error
        );
      }
    };

    fetchAgentData();
    fetchShipsData();
  }, [token]);

  const buyShip = async (shipType) => {
    const options = {
      method: "POST",
      url: "https://api.spacetraders.io/v2/my/ships",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${token}`,
      },
      data: { shipType: shipType, waypointSymbol: selectedShipyardSymbol },
    };

    try {
      const { data } = await axios.request(options);
      window.location.reload();
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <div className="page">
        <section className="menu">
          <h1 className="menu__logo">
            <img src="/images/logo.png" /> NovaPilot{" "}
          </h1>
          <div className="menu__link">
            <h3 className="h3__title"> GENERAL </h3>
            <Link to={"/dashboard"} className="menu__link--dashboard">
              {" "}
              <svg
                width="50"
                height="50"
                viewBox="0 0 33 33"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M5.5 6.875C5.5 6.51033 5.64487 6.16059 5.90273 5.90273C6.16059 5.64487 6.51033 5.5 6.875 5.5H12.375C12.7397 5.5 13.0894 5.64487 13.3473 5.90273C13.6051 6.16059 13.75 6.51033 13.75 6.875V13.75C13.75 14.1147 13.6051 14.4644 13.3473 14.7223C13.0894 14.9801 12.7397 15.125 12.375 15.125H6.875C6.51033 15.125 6.16059 14.9801 5.90273 14.7223C5.64487 14.4644 5.5 14.1147 5.5 13.75V6.875ZM19.25 6.875C19.25 6.51033 19.3949 6.16059 19.6527 5.90273C19.9106 5.64487 20.2603 5.5 20.625 5.5H26.125C26.4897 5.5 26.8394 5.64487 27.0973 5.90273C27.3551 6.16059 27.5 6.51033 27.5 6.875V9.625C27.5 9.98967 27.3551 10.3394 27.0973 10.5973C26.8394 10.8551 26.4897 11 26.125 11H20.625C20.2603 11 19.9106 10.8551 19.6527 10.5973C19.3949 10.3394 19.25 9.98967 19.25 9.625V6.875ZM5.5 22C5.5 21.6353 5.64487 21.2856 5.90273 21.0277C6.16059 20.7699 6.51033 20.625 6.875 20.625H12.375C12.7397 20.625 13.0894 20.7699 13.3473 21.0277C13.6051 21.2856 13.75 21.6353 13.75 22V26.125C13.75 26.4897 13.6051 26.8394 13.3473 27.0973C13.0894 27.3551 12.7397 27.5 12.375 27.5H6.875C6.51033 27.5 6.16059 27.3551 5.90273 27.0973C5.64487 26.8394 5.5 26.4897 5.5 26.125V22ZM19.25 17.875C19.25 17.5103 19.3949 17.1606 19.6527 16.9027C19.9106 16.6449 20.2603 16.5 20.625 16.5H26.125C26.4897 16.5 26.8394 16.6449 27.0973 16.9027C27.3551 17.1606 27.5 17.5103 27.5 17.875V26.125C27.5 26.4897 27.3551 26.8394 27.0973 27.0973C26.8394 27.3551 26.4897 27.5 26.125 27.5H20.625C20.2603 27.5 19.9106 27.3551 19.6527 27.0973C19.3949 26.8394 19.25 26.4897 19.25 26.125V17.875Z"
                  stroke-width="2.5"
                />
              </svg>{" "}
              Dashboard{" "}
            </Link>
            <Link to={"/vaisseaux"} className="menu__link--vaisseaux">
              {" "}
              <svg
                width="50"
                height="50"
                viewBox="0 0 28 27"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14.5274 -0.0078125L17.3339 2.09711L20.9411 9.31135L20.469 11.1998L19.0075 10.9562L19.1927 10.339L19.3592 9.78397L14 8.71229L8.64087 9.78397L8.99255 10.9562L7.53104 11.1997L7.05896 9.31135L10.666 2.09723L13.4727 -0.0078125V3.27344H11.1875L10.25 5.14844L14 7.375L17.75 5.14844L16.8125 3.27344H14.5274V-0.0078125ZM25.5613 9.90965L27.3367 10.5015L26.547 12.2127L24.7883 11.9197L25.5613 9.90965ZM2.43872 9.90965L3.21181 11.9196L1.45306 12.2127L0.66333 10.5015L2.43872 9.90965ZM14 10.0305L17.1524 13.4695L15.4828 19.0352H12.5174L10.8477 13.4695L14 10.0305ZM15.4798 10.0837L18.0159 10.591L17.5052 12.2933L15.4798 10.0837ZM12.5203 10.0838L10.4948 12.2934L9.98419 10.591L12.5203 10.0838ZM18.7019 11.9745L27.2715 13.4027L24.1836 19.5789L18.3348 13.1983L18.7019 11.9745ZM9.29812 11.9745L9.66526 13.1983L3.81644 19.5788L0.728545 13.4027L9.29812 11.9745ZM17.982 14.3745L22.2125 18.9896L17.2581 16.7876L17.982 14.3745ZM10.0181 14.3745L10.742 16.7876L5.78753 18.9896L10.0181 14.3745ZM16.9525 17.806L18.631 18.552L17.3383 23.7227H14.5274V20.0898H16.2673L16.9525 17.806ZM11.0475 17.806L11.7327 20.0898H13.4727V23.7227H10.6618L9.36907 18.552L11.0475 17.806ZM21.711 19.9208L22.7718 20.3923L22.1868 21.66L21.2266 21.1799L21.711 19.9208ZM6.28909 19.9208L6.77343 21.1799L5.81325 21.66L5.22825 20.3923L6.28909 19.9208ZM17.2227 24.7773V26.5352H15.4649V24.7773H17.2227ZM12.5352 24.7773V26.5352H10.7774V24.7773H12.5352Z"
                  fill="#020202"
                />
              </svg>{" "}
              Vaisseaux{" "}
            </Link>
          </div>
          <p className="menu__made">
            {" "}
            <img src="/images/logo.png" /> 2023 Made by Mulx{" "}
          </p>
        </section>
        <section className="buying">
          <h2 className="h2__title"> Achat d'un nouveau vaisseau</h2>
          <div className="buying__link">
            <p className="buying__link--money">
              {" "}
              <svg
                width="30"
                height="30"
                viewBox="0 0 60 60"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M40 40C40 37.2375 32.165 35 22.5 35M40 40C40 42.7625 32.165 45 22.5 45C12.835 45 5 42.7625 5 40M40 40V52.3425C40 55.19 32.165 57.5 22.5 57.5C12.835 57.5 5 55.1925 5 52.3425V40M40 40C49.56 40 57.5 37.5325 57.5 35V10M22.5 35C12.835 35 5 37.2375 5 40M22.5 35C11.455 35 2.5 32.5325 2.5 30V17.5M22.5 12.5C11.455 12.5 2.5 14.7375 2.5 17.5M2.5 17.5C2.5 20.2625 11.455 22.5 22.5 22.5C22.5 25.0325 30.6325 27.5 40.1925 27.5C49.75 27.5 57.5 25.0325 57.5 22.5M57.5 10C57.5 7.2375 49.75 5 40.1925 5C30.6325 5 22.885 7.2375 22.885 10M57.5 10C57.5 12.7625 49.75 15 40.1925 15C30.635 15 22.885 12.7625 22.885 10M22.885 10V35.415"
                  stroke="#66CCFF"
                  stroke-width="2.5"
                />
              </svg>
              {agentData ? agentData.credits : "Chargement..."}{" "}
            </p>
            <div className="buying__link--search">
              <svg
                width="30"
                height="30"
                viewBox="0 0 30 30"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clip-path="url(#clip0_6_487)">
                  <path
                    d="M13.125 2.5C15.1199 2.49987 17.0746 3.06138 18.7653 4.12029C20.4561 5.1792 21.8145 6.69271 22.6852 8.48762C23.5559 10.2825 23.9037 12.2863 23.6888 14.2697C23.4739 16.253 22.7049 18.1358 21.47 19.7025L26.035 24.2675C26.2626 24.5033 26.3886 24.819 26.3858 25.1468C26.3829 25.4745 26.2515 25.788 26.0197 26.0198C25.788 26.2515 25.4744 26.383 25.1467 26.3858C24.819 26.3887 24.5032 26.2627 24.2675 26.035L19.7025 21.47C18.3718 22.5187 16.8096 23.234 15.1462 23.5561C13.4829 23.8783 11.7666 23.798 10.1406 23.322C8.51458 22.846 7.02599 21.988 5.799 20.8197C4.57201 19.6513 3.64221 18.2065 3.08717 16.6057C2.53214 15.005 2.36796 13.2947 2.60834 11.6176C2.84871 9.94043 3.48667 8.34511 4.469 6.96469C5.45132 5.58427 6.74951 4.45878 8.25527 3.68212C9.76103 2.90546 11.4307 2.50014 13.125 2.5ZM13.125 5C10.9701 5 8.90344 5.85602 7.37971 7.37976C5.85597 8.90349 4.99995 10.9701 4.99995 13.125C4.99995 15.2799 5.85597 17.3465 7.37971 18.8702C8.90344 20.394 10.9701 21.25 13.125 21.25C15.2798 21.25 17.3465 20.394 18.8702 18.8702C20.3939 17.3465 21.25 15.2799 21.25 13.125C21.25 10.9701 20.3939 8.90349 18.8702 7.37976C17.3465 5.85602 15.2798 5 13.125 5ZM13.125 6.25C14.9483 6.25 16.697 6.97433 17.9863 8.26364C19.2756 9.55295 20 11.3016 20 13.125C20 14.9484 19.2756 16.697 17.9863 17.9864C16.697 19.2757 14.9483 20 13.125 20C11.3016 20 9.5529 19.2757 8.26359 17.9864C6.97428 16.697 6.24995 14.9484 6.24995 13.125C6.24995 11.3016 6.97428 9.55295 8.26359 8.26364C9.5529 6.97433 11.3016 6.25 13.125 6.25Z"
                    fill="#66CCFF"
                  />
                </g>
                <defs>
                  <clipPath id="clip0_6_487">
                    <rect width="30" height="30" fill="white" />
                  </clipPath>
                </defs>
              </svg>
              <input placeholder=" Trouver un vaisseau"></input>
            </div>
          </div>
          <div className="vaisseau">
            {shipsData ? (
              shipsData.map((ship, index) => (
                <div key={index}>
                  <div className="allship__buy">
                    {ship.ships.map((ship, idx) => (
                      <div className="buyship" key={idx}>
                        <div>
                          <p className="name">{ship.name}</p>
                          <div className="type">
                            <svg
                              width="35"
                              height="35"
                              viewBox="0 0 30 30"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M15.5274 1.99219L18.3339 4.09711L21.9411 11.3113L21.469 13.1998L20.0075 12.9562L20.1927 12.339L20.3592 11.784L15 10.7123L9.64087 11.784L9.99255 12.9562L8.53104 13.1997L8.05896 11.3113L11.666 4.09723L14.4727 1.99219V5.27344H12.1875L11.25 7.14844L15 9.375L18.75 7.14844L17.8125 5.27344H15.5274V1.99219ZM26.5613 11.9096L28.3367 12.5015L27.547 14.2127L25.7883 13.9197L26.5613 11.9096ZM3.43872 11.9096L4.21181 13.9196L2.45306 14.2127L1.66333 12.5015L3.43872 11.9096ZM15 12.0305L18.1524 15.4695L16.4828 21.0352H13.5174L11.8477 15.4695L15 12.0305ZM16.4798 12.0837L19.0159 12.591L18.5052 14.2933L16.4798 12.0837ZM13.5203 12.0838L11.4948 14.2934L10.9842 12.591L13.5203 12.0838ZM19.7019 13.9745L28.2715 15.4027L25.1836 21.5789L19.3348 15.1983L19.7019 13.9745ZM10.2981 13.9745L10.6653 15.1983L4.81644 21.5788L1.72854 15.4027L10.2981 13.9745ZM18.982 16.3745L23.2125 20.9896L18.2581 18.7876L18.982 16.3745ZM11.0181 16.3745L11.742 18.7876L6.78753 20.9896L11.0181 16.3745ZM17.9525 19.806L19.631 20.552L18.3383 25.7227H15.5274V22.0898H17.2673L17.9525 19.806ZM12.0475 19.806L12.7327 22.0898H14.4727V25.7227H11.6618L10.3691 20.552L12.0475 19.806ZM22.711 21.9208L23.7718 22.3923L23.1868 23.66L22.2266 23.1799L22.711 21.9208ZM7.28909 21.9208L7.77343 23.1799L6.81325 23.66L6.22825 22.3923L7.28909 21.9208ZM18.2227 26.7773V28.5352H16.4649V26.7773H18.2227ZM13.5352 26.7773V28.5352H11.7774V26.7773H13.5352Z"
                                fill="#66CCFF"
                              />
                            </svg>
                            <p>{ship.type}</p>
                          </div>

                          <p className="description">{ship.description}</p>
                          <div className="modules">
                            <svg
                              width="35"
                              height="35"
                              viewBox="0 0 28 28"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M7.4375 0.347656C6.89363 0.347656 6.44141 0.799883 6.44141 1.34375C6.44141 1.69473 6.63031 2.00686 6.91016 2.18457V4.55527L6.02211 4.9877L4.37188 12.4139L8.8543 11.6668L9.74715 6.30934L12.5754 1.7968L7.96484 4.04182V2.18457C8.24469 2.00686 8.43359 1.69473 8.43359 1.34375C8.43359 0.799883 7.98137 0.347656 7.4375 0.347656ZM14 1.50969L10.8723 6.5H17.1277L14 1.50969ZM23.375 1.63672C21.9125 1.63672 20.7383 2.81094 20.7383 4.27344C20.7383 5.73594 21.9125 6.91016 23.375 6.91016C24.8375 6.91016 26.0117 5.73594 26.0117 4.27344C26.0117 2.81094 24.8375 1.63672 23.375 1.63672ZM15.4246 1.7968L18.2529 6.30934L19.1357 11.607L23.6262 12.4049L22.6222 7.88703C20.9484 7.53758 19.6836 6.04807 19.6836 4.27344C19.6836 4.14084 19.691 4.00994 19.7047 3.88086L15.4246 1.7968ZM23.375 3.16016C23.9189 3.16016 24.3711 3.61238 24.3711 4.15625C24.3711 4.70012 23.9189 5.15234 23.375 5.15234C22.8311 5.15234 22.3789 4.70012 22.3789 4.15625C22.3789 3.61238 22.8311 3.16016 23.375 3.16016ZM6.5 5.97266H8.375V7.02734H6.5V5.97266ZM10.25 11.1875L11.1875 13.0625H16.8125L17.75 11.1875H10.25ZM19.032 12.66L16.7199 18.0545L22.0606 17.2723L23.5821 13.4684L19.032 12.6599L19.032 12.66ZM8.98508 12.7142L4.42051 13.475L5.93937 17.2722L11.1832 18.0404L8.98508 12.7142V12.7142ZM10.6568 14L12.3976 18.2183L14 18.453L15.4957 18.2339L17.3102 14H10.6569H10.6568ZM5.67852 18.2999L2.40723 25.6602H0.875V26.7148H4.625V25.6602H3.56152L3.9449 24.7977C3.95393 24.7941 3.9616 24.7905 3.97338 24.7871C4.056 24.7629 4.15443 24.731 4.27203 24.6912C4.50723 24.6116 4.81672 24.5008 5.17813 24.3681C5.90117 24.1027 6.82971 23.7506 7.74805 23.3986C8.66278 23.0479 9.57649 22.6945 10.4892 22.3385L13.4727 24.5762V26.5977H12.125V27.6523H15.875V26.5977H14.5273V24.5762L17.5108 22.3385C18.4235 22.6945 19.3371 23.0479 20.2518 23.3987C21.1703 23.7507 22.0989 24.1028 22.8218 24.3681C23.1833 24.5007 23.4927 24.6116 23.7279 24.6911C23.8455 24.731 23.9439 24.7629 24.0266 24.7871C24.0385 24.7904 24.0461 24.7941 24.0552 24.7976L24.4385 25.6602H23.375V26.7148H27.125V25.6602H25.5928L22.3215 18.3L21.2379 18.4588L23.4701 23.4813C23.3763 23.4474 23.2886 23.4159 23.1853 23.378C22.4714 23.1161 21.5453 22.765 20.6294 22.4139C19.8613 22.1192 19.094 21.8228 18.3273 21.5247L19.7514 18.6765L18.479 18.8629L17.4242 20.9727H14.5273V19.4416L14 19.5189L13.4727 19.4416V20.9727H10.5759L9.52104 18.8628L8.2485 18.6765L9.67256 21.5246C8.90593 21.8228 8.1386 22.1192 7.37059 22.4138C6.45459 22.7649 5.5284 23.116 4.81461 23.378C4.71125 23.416 4.62359 23.4475 4.52984 23.4813L6.76197 18.4587L5.6784 18.2999H5.67852ZM11.832 22.0273H13.4727V23.2578L11.832 22.0273ZM14.5273 22.0273H16.168L14.5273 23.2578V22.0273Z"
                                fill="#66CCFF"
                              />
                            </svg>
                            <p>
                              {ship.modules
                                .map((module) => module.name)
                                .join(", ")}
                            </p>
                          </div>
                          <div className="price">
                            <svg
                              width="35"
                              height="35"
                              viewBox="0 0 60 60"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M40 40C40 37.2375 32.165 35 22.5 35M40 40C40 42.7625 32.165 45 22.5 45C12.835 45 5 42.7625 5 40M40 40V52.3425C40 55.19 32.165 57.5 22.5 57.5C12.835 57.5 5 55.1925 5 52.3425V40M40 40C49.56 40 57.5 37.5325 57.5 35V10M22.5 35C12.835 35 5 37.2375 5 40M22.5 35C11.455 35 2.5 32.5325 2.5 30V17.5M22.5 12.5C11.455 12.5 2.5 14.7375 2.5 17.5M2.5 17.5C2.5 20.2625 11.455 22.5 22.5 22.5C22.5 25.0325 30.6325 27.5 40.1925 27.5C49.75 27.5 57.5 25.0325 57.5 22.5M57.5 10C57.5 7.2375 49.75 5 40.1925 5C30.6325 5 22.885 7.2375 22.885 10M57.5 10C57.5 12.7625 49.75 15 40.1925 15C30.635 15 22.885 12.7625 22.885 10M22.885 10V35.415"
                                stroke="#66CCFF"
                                stroke-width="2.5"
                              />
                            </svg>

                            <p>{ship.purchasePrice}</p>
                          </div>

                          <button
                            className="btn__buy"
                            onClick={() => buyShip(ship.type)}
                          >
                            {" "}
                            Acheter
                          </button>
                        </div>
                        <div className="progress__container">
                          <p className="progress__bar">
                            <svg
                              width="36"
                              height="36"
                              viewBox="0 0 33 33"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M19.0486 4.32642C19.1774 4.45535 19.2499 4.63019 19.2499 4.81249C19.2499 4.99479 19.1774 5.16962 19.0486 5.29855L17.4721 6.87499L19.0486 8.45142C19.1738 8.58109 19.2431 8.75475 19.2415 8.93501C19.24 9.11527 19.1677 9.28771 19.0402 9.41517C18.9127 9.54264 18.7403 9.61495 18.56 9.61651C18.3798 9.61808 18.2061 9.54878 18.0764 9.42355L16.5 7.84711L14.9236 9.42355C14.8597 9.48738 14.7839 9.538 14.7004 9.57253C14.617 9.60706 14.5276 9.62481 14.4373 9.62478C14.347 9.62475 14.2575 9.60693 14.1741 9.57235C14.0907 9.53776 14.0149 9.48708 13.9511 9.4232C13.8873 9.35933 13.8366 9.28351 13.8021 9.20007C13.7676 9.11663 13.7498 9.0272 13.7499 8.9369C13.7499 8.8466 13.7677 8.75719 13.8023 8.67377C13.8369 8.59035 13.8876 8.51457 13.9514 8.45074L15.5279 6.87499L13.9514 5.29855C13.8876 5.23467 13.837 5.15885 13.8025 5.07541C13.7679 4.99197 13.7502 4.90255 13.7502 4.81224C13.7502 4.72194 13.7681 4.63253 13.8026 4.54911C13.8372 4.4657 13.8879 4.38991 13.9518 4.32608C14.0157 4.26225 14.0915 4.21163 14.1749 4.1771C14.2584 4.14257 14.3478 4.12482 14.4381 4.12485C14.5284 4.12488 14.6178 4.1427 14.7012 4.17728C14.7846 4.21187 14.8604 4.26255 14.9243 4.32642L16.5 5.90286L18.0764 4.32642C18.2054 4.19754 18.3802 4.12513 18.5625 4.12513C18.7448 4.12513 18.9196 4.19754 19.0486 4.32642ZM13.1986 22.5005C13.6589 22.6539 14.1549 22.6645 14.6213 22.531C15.0878 22.3975 15.503 22.1262 15.8125 21.7525V28.8908L7.5625 25.7812V20.6222L13.1986 22.5005Z"
                                fill="#66CCFF"
                              />
                              <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M25.4375 25.7812L17.1875 28.8908V21.7525C17.497 22.1262 17.9122 22.3975 18.3787 22.531C18.8451 22.6645 19.3411 22.6539 19.8014 22.5005L25.4375 20.6222V25.7812ZM16.7248 10.3503C16.5792 10.2999 16.4208 10.2999 16.2752 10.3503L7.33907 13.444L7.32326 13.4489C7.20305 13.4934 7.09776 13.5708 7.01938 13.6723L4.27626 17.1015C4.20697 17.188 4.15961 17.2899 4.1382 17.3986C4.11679 17.5073 4.12197 17.6196 4.1533 17.7259C4.18463 17.8321 4.24118 17.9293 4.31813 18.009C4.39508 18.0887 4.49016 18.1486 4.59526 18.1837L13.8765 21.2774C14.0171 21.3241 14.169 21.3242 14.3096 21.2776C14.4502 21.2311 14.572 21.1403 14.6568 21.0189L16.5 18.3858L18.3425 21.0189C18.4274 21.1405 18.5493 21.2313 18.6901 21.2779C18.8308 21.3245 18.9829 21.3243 19.1235 21.2774L28.4048 18.1837C28.5099 18.1487 28.6051 18.0888 28.6821 18.0092C28.7591 17.9295 28.8158 17.8324 28.8471 17.7261C28.8785 17.6198 28.8838 17.5075 28.8624 17.3988C28.8411 17.29 28.7937 17.188 28.7244 17.1015L25.9813 13.6723C25.8993 13.5662 25.7879 13.4866 25.6609 13.4434L16.7248 10.3503ZM16.5 16.4601L23.3358 14.0937L16.5 11.7274L9.6642 14.0937L16.5 16.4601Z"
                                fill="#66CCFF"
                              />
                            </svg>
                            {ship.modules.some(
                              (module) => module.name === "Cargo Hold"
                            ) ? (
                              <strong>
                                {
                                  ship.modules.find(
                                    (module) => module.name === "Cargo Hold"
                                  ).capacity
                                }
                              </strong>
                            ) : (
                              <strong>0</strong>
                            )}
                          </p>
                          <p className="progress__bar">
                            <svg
                              width="36"
                              height="36"
                              viewBox="0 0 33 33"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M4.125 2.75H8.25C8.635 2.75 8.97875 2.90125 9.22625 3.14875L12.0862 6.0225L13.1863 4.93625C13.75 4.4 14.4375 4.125 15.125 4.125H23.375C24.0625 4.125 24.75 4.4 25.3137 4.93625L26.6887 6.31125C27.225 6.875 27.5 7.5625 27.5 8.25V26.125C27.5 26.8543 27.2103 27.5538 26.6945 28.0695C26.1788 28.5853 25.4793 28.875 24.75 28.875H11C10.2707 28.875 9.57118 28.5853 9.05546 28.0695C8.53973 27.5538 8.25 26.8543 8.25 26.125V11C8.25 10.3125 8.525 9.625 9.06125 9.06125L10.1475 7.96125L7.68625 5.5H4.125V2.75ZM15.125 6.875V9.625H23.375V6.875H15.125ZM15.6887 15.125L12.9387 12.375H11V14.3137L13.75 17.0637V21.4363L11 24.1863V26.125H12.9387L15.6887 23.375H20.0613L22.8113 26.125H24.75V24.1863L22 21.4363V17.0637L24.75 14.3137V12.375H22.8113L20.0613 15.125H15.6887ZM16.5 17.875H19.25V20.625H16.5V17.875Z"
                                fill="#66CCFF"
                              />
                            </svg>

                            <strong>{ship.frame.fuelCapacity}</strong>
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))
            ) : (
              <p>Chargement...</p>
            )}
          </div>
        </section>
      </div>
    </>
  );
}